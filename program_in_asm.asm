push 2    #начальная позиция стекового фрейма
pop BX

#описание 0 оператора

	#начало var_declaration  double <variable>...

	#начало assign <variable> = <expression>

	#начало expression

	#начало сканирования числа

	in    #считывает число и кладёт его в стек

	#конец сканирования числа

	#конец expression

	#начало присваивания переменной

	pop [0]    #присвоил значение глобальной переменной

	#конец присваивания переменной

	#конец assign

	#конец var_declaration

#описание 1 оператора

	#начало var_declaration  double <variable>...

	#начало assign <variable> = <expression>

	#начало expression

	push 1    #кладёт в стек число = 1
	#конец expression

	#начало присваивания переменной

	pop [1]    #присвоил значение глобальной переменной

	#конец присваивания переменной

	#конец assign

	#конец var_declaration

#описание 2 оператора

	#начало if

		#условие if

		#начало печати сравнения

		#левая часть сравнения

		push [0]    #вернул значение глобальной переменной

		#правая часть сравнения

		push 0    #кладёт в стек число = 0
		#операция сравнения

		# <> <  <>
		jbe skip_if_0:    #если условие не верно, то перепрыгни через тело if

		#тело if

		#описание 3 оператора

			hlt #остановка процессора

		skip_if_0:    #метка для пропуска if

	#конец if

#описание 4 оператора

	#начало while

		repeat_while_0:    #метка для повторного запуска while

		#условие while

		#начало печати сравнения

		#левая часть сравнения

		push [0]    #вернул значение глобальной переменной

		#правая часть сравнения

		push 1    #кладёт в стек число = 1
		#операция сравнения

		# <> >= <>
		ja skip_while_0:    #если условие не верно, то перепрыгни через тело while

		#тело while

		#описание 5 оператора

			#начало assign <variable> = <expression>

			#начало expression

			#начало выполнения арифметической операции с двумя аргументами

			push [0]    #вернул значение глобальной переменной

			push [1]    #вернул значение глобальной переменной

			mul    # exp * exp

			#конец выполнения арифметической операции с двумя аргументами

			#конец expression

			#начало присваивания переменной

			pop [1]    #присвоил значение глобальной переменной

			#конец присваивания переменной

			#конец assign

		#описание 6 оператора

			#начало assign <variable> = <expression>

			#начало expression

			#начало выполнения арифметической операции с двумя аргументами

			push [0]    #вернул значение глобальной переменной

			push 1    #кладёт в стек число = 1
			sub    # exp - exp

			#конец выполнения арифметической операции с двумя аргументами

			#конец expression

			#начало присваивания переменной

			pop [0]    #присвоил значение глобальной переменной

			#конец присваивания переменной

			#конец assign

		jmp repeat_while_0:    #метка для повторного запуска while

		skip_while_0:    #метка для пропуска while

	#конец while

#описание 7 оператора

	#начало печати числа

	push [1]    #вернул значение глобальной переменной

	out    #печатает число из стека

	#конец печати числа



hlt