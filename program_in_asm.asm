push 7    #начальная позиция стекового фрейма
pop BX

#описание 0 оператора

	#начало определения функции

	уносится_в_небо_машина:    #имя функции

		#параметры функции

		#тело функции

		#описание 1 оператора

			#начало var_declaration  double <variable>...

			#начало assign <variable> = <expression>

			#начало expression

			#начало сканирования числа

			in    #считывает число и кладёт его в стек

			#конец сканирования числа

			#конец expression

			#начало присваивания переменной

			pop [BX+0]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

			#конец var_declaration

		#описание 2 оператора

			#начало var_declaration  double <variable>...

			#начало assign <variable> = <expression>

			#начало expression

			#начало сканирования числа

			in    #считывает число и кладёт его в стек

			#конец сканирования числа

			#конец expression

			#начало присваивания переменной

			pop [BX+1]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

			#конец var_declaration

		#описание 3 оператора

			#начало var_declaration  double <variable>...

			#начало assign <variable> = <expression>

			#начало expression

			#начало сканирования числа

			in    #считывает число и кладёт его в стек

			#конец сканирования числа

			#конец expression

			#начало присваивания переменной

			pop [BX+2]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

			#конец var_declaration

		#описание 4 оператора

			#начало var_declaration  double <variable>...

			#начало assign <variable> = <expression>

			#начало expression

			push 0    #кладёт в стек число = 0
			#конец expression

			#начало присваивания переменной

			pop [BX+3]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

			#конец var_declaration

		#описание 5 оператора

			#начало var_declaration  double <variable>...

			#начало assign <variable> = <expression>

			#начало expression

			push 0    #кладёт в стек число = 0
			#конец expression

			#начало присваивания переменной

			pop [BX+4]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

			#конец var_declaration

		#описание 6 оператора

			#начало if

				#условие if

				#начало печати сравнения

				#левая часть сравнения

				push [BX+0]    #вернул значение локальной переменной

				#правая часть сравнения

				push 0    #кладёт в стек число = 0
				#операция сравнения

				# <> == <>
				jne skip_if_0:    #если условие не верно, то перепрыгни через тело if

				#тело if

				#описание 7 оператора

					#начало if

						#условие if

						#начало печати сравнения

						#левая часть сравнения

						push [BX+1]    #вернул значение локальной переменной

						#правая часть сравнения

						push 0    #кладёт в стек число = 0
						#операция сравнения

						# <> == <>
						jne skip_if_1:    #если условие не верно, то перепрыгни через тело if

						#тело if

						#описание 8 оператора

							#начало if

								#условие if

								#начало печати сравнения

								#левая часть сравнения

								push [BX+2]    #вернул значение локальной переменной

								#правая часть сравнения

								push 0    #кладёт в стек число = 0
								#операция сравнения

								# <> == <>
								jne skip_if_2:    #если условие не верно, то перепрыгни через тело if

								#тело if

								#описание 9 оператора

									#начало печати числа

									push 1    #кладёт в стек число = 1
									out    #печатает число из стека

									#конец печати числа

								#описание 10 оператора

									#начало печати числа

									push 2    #кладёт в стек число = 2
									out    #печатает число из стека

									#конец печати числа

								#описание 11 оператора

									#начало печати числа

									push 3    #кладёт в стек число = 3
									out    #печатает число из стека

									#конец печати числа

								#описание 12 оператора

									#начало печати числа

									push 4    #кладёт в стек число = 4
									out    #печатает число из стека

									#конец печати числа

								#описание 13 оператора

									#начало печати числа

									push 5    #кладёт в стек число = 5
									out    #печатает число из стека

									#конец печати числа

								skip_if_2:    #метка для пропуска if

							#конец if

						#описание 14 оператора

							hlt #остановка процессора

						skip_if_1:    #метка для пропуска if

					#конец if

				#описание 15 оператора

					#начало assign <variable> = <expression>

					#начало expression

					#начало выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push -100    #кладёт в стек число = -100
					push [BX+2]    #вернул значение локальной переменной

					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					push [BX+1]    #вернул значение локальной переменной

					div    # exp / exp

					#конец выполнения арифметической операции с двумя аргументами

					#конец expression

					#начало присваивания переменной

					pop [BX+3]    #присвоил значение локальной переменной

					#конец присваивания переменной

					#конец assign

				#описание 16 оператора

					#начало печати числа

					push [BX+3]    #вернул значение локальной переменной

					out    #печатает число из стека

					#конец печати числа

				#описание 17 оператора

					hlt #остановка процессора

				skip_if_0:    #метка для пропуска if

			#конец if

		#описание 18 оператора

			#начало var_declaration  double <variable>...

			#начало assign <variable> = <expression>

			#начало expression

			#начало выполнения арифметической операции с двумя аргументами

			#начало выполнения арифметической операции с двумя аргументами

			push [BX+1]    #вернул значение локальной переменной

			push [BX+1]    #вернул значение локальной переменной

			mul    # exp * exp

			#конец выполнения арифметической операции с двумя аргументами

			#начало выполнения арифметической операции с двумя аргументами

			push 4    #кладёт в стек число = 4
			#начало выполнения арифметической операции с двумя аргументами

			push [BX+0]    #вернул значение локальной переменной

			push [BX+2]    #вернул значение локальной переменной

			mul    # exp * exp

			#конец выполнения арифметической операции с двумя аргументами

			mul    # exp * exp

			#конец выполнения арифметической операции с двумя аргументами

			sub    # exp - exp

			#конец выполнения арифметической операции с двумя аргументами

			#конец expression

			#начало присваивания переменной

			pop [BX+5]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

			#конец var_declaration

		#описание 19 оператора

			#начало assign <variable> = <expression>

			#начало expression

			#начало выполнения арифметической операции с двумя аргументами

			push [BX+5]    #вернул значение локальной переменной

			push 10000    #кладёт в стек число = 10000
			mul    # exp * exp

			#конец выполнения арифметической операции с двумя аргументами

			#конец expression

			#начало присваивания переменной

			pop [BX+5]    #присвоил значение локальной переменной

			#конец присваивания переменной

			#конец assign

		#описание 20 оператора

			#начало if

				#условие if

				#начало печати сравнения

				#левая часть сравнения

				push [BX+5]    #вернул значение локальной переменной

				#правая часть сравнения

				push 0    #кладёт в стек число = 0
				#операция сравнения

				# <> >  <>
				jae skip_if_3:    #если условие не верно, то перепрыгни через тело if

				#тело if

				#описание 21 оператора

					#начало assign <variable> = <expression>

					#начало expression

					#начало выполнения арифметической операции с один аргументом

					push [BX+5]    #вернул значение локальной переменной

					sqrt    # sqrt exp

					#конец выполнения арифметической операции с один аргументом

					#конец expression

					#начало присваивания переменной

					pop [BX+5]    #присвоил значение локальной переменной

					#конец присваивания переменной

					#конец assign

				#описание 22 оператора

					#начало assign <variable> = <expression>

					#начало expression

					#начало выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push -100    #кладёт в стек число = -100
					push [BX+1]    #вернул значение локальной переменной

					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					push [BX+5]    #вернул значение локальной переменной

					add    # exp + exp

					#конец выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push [BX+0]    #вернул значение локальной переменной

					push 2    #кладёт в стек число = 2
					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					div    # exp / exp

					#конец выполнения арифметической операции с двумя аргументами

					#конец expression

					#начало присваивания переменной

					pop [BX+3]    #присвоил значение локальной переменной

					#конец присваивания переменной

					#конец assign

				#описание 23 оператора

					#начало assign <variable> = <expression>

					#начало expression

					#начало выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push -100    #кладёт в стек число = -100
					push [BX+1]    #вернул значение локальной переменной

					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					push [BX+5]    #вернул значение локальной переменной

					sub    # exp - exp

					#конец выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push [BX+0]    #вернул значение локальной переменной

					push 2    #кладёт в стек число = 2
					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					div    # exp / exp

					#конец выполнения арифметической операции с двумя аргументами

					#конец expression

					#начало присваивания переменной

					pop [BX+4]    #присвоил значение локальной переменной

					#конец присваивания переменной

					#конец assign

				#описание 24 оператора

					#начало печати числа

					push [BX+3]    #вернул значение локальной переменной

					out    #печатает число из стека

					#конец печати числа

				#описание 25 оператора

					#начало печати числа

					push [BX+4]    #вернул значение локальной переменной

					out    #печатает число из стека

					#конец печати числа

				#описание 26 оператора

					hlt #остановка процессора

				skip_if_3:    #метка для пропуска if

			#конец if

		#описание 27 оператора

			#начало if

				#условие if

				#начало печати сравнения

				#левая часть сравнения

				push [BX+5]    #вернул значение локальной переменной

				#правая часть сравнения

				push 0    #кладёт в стек число = 0
				#операция сравнения

				# <> == <>
				jne skip_if_4:    #если условие не верно, то перепрыгни через тело if

				#тело if

				#описание 28 оператора

					#начало assign <variable> = <expression>

					#начало expression

					#начало выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push -100    #кладёт в стек число = -100
					push [BX+1]    #вернул значение локальной переменной

					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					#начало выполнения арифметической операции с двумя аргументами

					push [BX+0]    #вернул значение локальной переменной

					push 2    #кладёт в стек число = 2
					mul    # exp * exp

					#конец выполнения арифметической операции с двумя аргументами

					div    # exp / exp

					#конец выполнения арифметической операции с двумя аргументами

					#конец expression

					#начало присваивания переменной

					pop [BX+3]    #присвоил значение локальной переменной

					#конец присваивания переменной

					#конец assign

				#описание 29 оператора

					#начало печати числа

					push [BX+3]    #вернул значение локальной переменной

					out    #печатает число из стека

					#конец печати числа

				#описание 30 оператора

					hlt #остановка процессора

				skip_if_4:    #метка для пропуска if

			#конец if

		#описание 31 оператора

						#завершение функции

			#вычисляет значение, возвращаемое функцией

			push 0    #кладёт в стек число = 0
			pop AX    #записывает возвращаемое функцией значение

		#конец функции

	hlt    #останавливает процессор

hlt